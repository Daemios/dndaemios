Vue.component("attributes",{template:`\n        <div id="attributes" class="card">\n            <h2>Attributes</h2>\n            <div class="attribute">\n                <span class="attribute-name" v-for="attribute in character.attributes">{{attribute.long}}:</span>\n                <span class="attribute-value" v-for="attribute in character.attributes">{{attribute.value}}</span>\n                <span class="attribute-bonus" v-for="attribute in character.attributes">({{attributeBonus(attribute.value)}})</span>\n            </div>\n        </div>`,props:{character:{type:Object}},methods:{attributeBonus(value){return Math.floor((value-10)/2)}}});Vue.component("combat-stats",{template:`\n        <div id="combat-stats" class="card">\n            <h2>Stats</h2>\n            <div class="max-life">\n                <span>Max Life:</span>\n                <span>{{life}}</span>\n            </div>\n            <div class="life-per-level">\n                <span>Life per Level:</span>\n                <span>+{{lifePerLevel}}</span>\n            </div>\n            <div class="initiative">\n                <span>Initiative:</span>\n                <span>{{addSign(attributeBonus(character.attributes.dexterity.value))}}</span>\n            </div>\n        </div>`,data(){return{}},props:{character:{type:Object}},computed:{life(){return this.character.level*(this.attributeBonus(this.character.attributes.constitution.value)+this.character.archetype.life)},lifePerLevel(){return this.attributeBonus(this.character.attributes.constitution.value)+this.character.archetype.life}},methods:{addSign(value){if(value>=0){return"+"+value}else{return value}},attributeBonus(value){return Math.floor((value-10)/2)},emitHealth(){}}});Vue.component("experience-details",{template:`\n        <div id="experience-details" class="card">\n            <h2>Experience & Details</h2>\n            <div class="bar-standin">\n                <span><strong>Level:</strong> {{character.level}}</span>\n                <span><strong>Experience:</strong> {{character.experience}}</span>\n                <span><strong>To Next Level:</strong> 0</span>\n            </div>\n            <div class="details">\n                <span><strong>Race:</strong> {{character.race}}</span>\n                <span><strong>Size:</strong> {{character.size}}</span>\n                <span><strong>Height:</strong> {{character.height}}</span>\n                <span><strong>Archetype:</strong> {{character.archetype.type}} / {{character.archetype.range}}</span>\n                <span><strong>Divinity:</strong> {{character.divinity.name}}</span>\n            </div>\n        </div>`,props:{character:{type:Object}},methods:{}});Vue.component("skills",{template:`\n        <div id="skills" class="card">\n            <h2>Skills</h2>\n            <div class="skill header">Skill</div>\n            <div class="value header">Value</div>\n            <div class="bonus header">Bonus</div>\n            <div v-for="skill in character.skills" class="skill"><strong>{{skill.pretty}}</strong></div>\n            <div v-for="skill in character.skills" class="value">{{skill.value}}</div>\n            <div v-for="skill in character.skills" class="bonus" v-if="character.attributes[skill.attribute]">\n                {{skillBonus(skill.value, skill.attribute)}}\n            </div>\n        </div>`,props:{character:{type:Object}},methods:{skillBonus(value,attribute){let base=Math.floor(this.character.attributes[attribute].value/2)-5;let combined=base+value;let string;if(combined>=0)string="+"+combined;else string=combined;return string}}});Vue.component("abilities",{template:`<div id="abilities" class="card">\n        <h2>Abilities</h2>\n        <div class="selectors">\n            <div \n                class="selector" \n                :class="isActive(key)" \n                @click="setActive(key)"\n                v-for="ability, key, index in character.abilities"\n            >\n                {{index+1}}\n            </div>\n        </div>\n        <div class="breakdown">\n            <h3>{{current.name}}</h3>\n            <div class="targeting">\n                <div class="targeting-container">\n                    \n                </div>\n            </div>  \n            <div class="overview">\n                <div class="damage">\n                    <strong>Damage: </strong>\n                    1d4\n                </div>\n                <div class="type">\n                    <strong>Type: </strong>\n                    {{elements()}}\n                </div>\n                <div class="effects">\n                    <strong>Effects:</strong>\n                    {{elementalEffects()}}\n                </div>\n            </div>\n            <div class="description">\n                \n            </div>\n        </div>\n    </div>`,props:{character:{type:Object},ability_data:{type:Object}},methods:{isActive(key){return this.active===key?"active":""},setActive(key){this.active=key;this.current=this.character.abilities[key]},elements(){let str="";if(this.current.elements){this.current.elements.forEach(element=>{str=str+element+", "})}return str.slice(0,-2)},elementalEffects(){let str="";if(this.current.elements){this.current.elements.forEach(element=>{str=str+this.ability_data.theme[element.toLowerCase()].effect+" "})}return str.slice(0,-1)}},data(){return{active:null,current:null}},created(){let active_key=Object.keys(this.character.abilities)[0];this.active=active_key;this.current=this.character.abilities[active_key];console.log("set:"+this.active)}});Vue.component("item",{template:`\n    <div class="item card">\n        <span class="icon">\n            <i class="fas" :class="item.type.class"></i>\n        </span>\n        <span class="name">{{item.name}}</span>\n        <span class="quantity">{{item.quantity}}</span>\n        <span class="edit">\n            <i class="fas fa-edit" @click="$emit('edit')"></i>\n        </span>\n    </div>`,props:{item:{type:Object,required:true}},methods:{}});Vue.component("entity",{template:`<div \n            class="entity" \n            :class="classes" \n            @mouseover="$emit('entity-mouseover')"\n            @mouseout="$emit('entity-mouseout')"\n        >\n        <div class="nameplate">\n            {{entity.name}}\n        </div>\n        <div class="stats">\n            <div class="ap">{{entity.ap.current}}</div>\n            <div class="mp">{{entity.mp.current}}</div>\n        </div>\n        <div class="hp">{{entity.life.current}}|{{entity.life.max}}</div>\n    </div>`,props:{entity:{type:Object,required:true},active:{Boolean:Boolean,required:true}},computed:{classes(){let string=this.entity.faction;if(this.active){string=string+" active"}return string}}});Vue.component("arena-cell",{template:`<div \n        class="cell" \n        :class="cell.terrain" \n        oncontextmenu="return false"\n        @click="$emit('click')"\n        @mouseover="$emit('cell-mouseover')"\n    >\n        <div class="overlay destination-overlay" v-if="cell.valid_destination && cell.valid_destination !== null && cell.passable"></div>\n        <div class="overlay impassable-overlay" v-if="cell.valid_destination && cell.valid_destination !== null && !cell.passable"></div>\n        <div class="entities" v-if="entities.length">\n            <entity \n                v-for="entity in entities[y][x]" \n                :entity="entity" \n                :active="isActive"\n                @entity-mouseover="$emit('entity-mouseover', entity)"\n                @entity-mouseout="$emit('entity-mouseout')"\n            ></entity>\n        </div>\n    </div>`,props:{cell:{type:Object,required:true},entities:{type:Array,required:true},active:{Object:Object,required:true},x:{type:Number|String,required:true},y:{type:Number|String,required:true}},computed:{isActive(){return this.x.toString()===this.active.x.toString()&&this.y.toString()===this.active.y.toString()}},mounted(){}});Vue.component("arena",{template:`<div id="arena" v-if="map !== null">\n        <div class="row" v-for="row, y in map">\n            <arena-cell \n                v-for="cell, x in row"\n                @click="$emit('click', x, y)"\n                @cell-mouseover="$emit('cell-mouseover', x, y)"\n                @entity-mouseover="$emit('entity-mouseover', x, y, $event)"\n                @entity-mouseout="$emit('entity-mouseout')"\n                :cell="cell"\n                :entities="entities"\n                :active="active"\n                :x="x"\n                :y="y"\n            ></arena-cell>\n        </div>\n    </div>`,props:{map:{type:Array,required:true},entities:{type:Array,required:true},active:{Object:Object,required:true}},mounted(){}});